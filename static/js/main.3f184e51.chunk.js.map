{"version":3,"sources":["Jokes.js","App.js","reportWebVitals.js","index.js"],"names":["Joke","props","className","joke","text","rating","Jokes","useState","jokes","setJokes","jokesList","map","Date","date","setDate","getJokes","a","timestamp","getTime","fetch","String","method","headers","response","json","responseData","error","alert","message","newJokesBtn","onClick","htmlFor","name","type","onChange","e","target","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAIA,SAASA,EAAKC,GACV,OACI,sBAAKC,UAAW,OAAhB,UACI,qBAAKA,UAAW,eAAhB,SACI,+BAAOD,EAAME,KAAKC,SAEtB,uBACA,qBAAKF,UAAU,iBAAf,SACI,yEAAcD,EAAME,KAAKE,OAAzB,gBA0DDC,MAnDf,WAAkB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAEPC,EAAYF,EAAMG,KAAI,SAACR,GACzB,OAAQ,6BAAI,cAACH,EAAD,CAAMG,KAAMA,SAHf,EAMWI,mBAAS,IAAIK,MANxB,mBAMNC,EANM,KAMAC,EANA,KAQPC,EAAQ,uCAAG,gCAAAC,EAAA,6DACPC,EAAYJ,EAAKK,UAAY,IAAO,EAD7B,kBAGcC,MACnB,wBAA0BC,OAAOH,GACjC,CACII,OAAQ,MACRC,QAAS,CACL,eAAgB,oCARnB,cAGHC,EAHG,gBAakBA,EAASC,OAb3B,YAaHC,EAbG,QAcQC,MAdR,wBAeLC,MAAMF,EAAaC,OAfd,2BAmBTjB,EAASgB,GAnBA,kDAqBTE,MAAM,KAAEC,SArBC,0DAAH,qDAyBRC,EAAc,wBAAQ3B,UAAW,wBAAyB4B,QAASf,EAArD,yGAEpB,OACI,sBAAKb,UAAW,gBAAhB,UACI,qBAAKA,UAAU,kBAAf,SACI,6BAAKQ,MAET,sBAAKR,UAAU,UAAf,UACI,sBAAKA,UAAU,cAAf,UACI,uBAAO6B,QAAQ,YAAf,gGACA,uBAAOC,KAAM,YAAaC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOrB,EAAQ,IAAIF,KAAKuB,EAAEC,OAAOC,cAEpFR,SCnDFS,MAVf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,SCKOqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3f184e51.chunk.js","sourcesContent":["import React from \"react\";\nimport {useState} from \"react\"\n\n\nfunction Joke(props) {\n    return (\n        <div className={'joke'}>\n            <div className={'text-wrapper'}>\n                <span>{props.joke.text}</span>\n            </div>\n            <hr/>\n            <div className=\"rating-wrapper\">\n                <span>Оценка {props.joke.rating} / 10</span>\n            </div>\n        </div>\n    );\n}\n\n\nfunction Jokes() {\n    const [jokes, setJokes] = useState([]);\n    const jokesList = jokes.map((joke) => {\n        return (<li><Joke joke={joke}/></li>)\n    });\n\n    const [date, setDate] = useState(new Date());\n\n    const getJokes = async function () {\n        const timestamp = date.getTime() / 1000 | 0;\n        try {\n            const response = await fetch(\n                '/api/jokes/list?date=' + String(timestamp),\n                {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json;charset=utf-8'\n                    }\n                }\n            );\n\n            const responseData = await response.json();\n            if (responseData.error) {\n                alert(responseData.error);\n                return;\n            }\n\n            setJokes(responseData);\n        } catch (e) {\n            alert(e.message)\n        }\n    }\n\n    const newJokesBtn = <button className={'jokes-requester blink'} onClick={getJokes}>Показать приколы</button>\n\n    return (\n        <div className={'jokes-wrapper'}>\n            <div className=\"jokes-container\">\n                <ul>{jokesList}</ul>\n            </div>\n            <div className=\"actions\">\n                <div className=\"date-picker\">\n                    <label htmlFor=\"jokesDate\">Выберите дату:&nbsp;&nbsp;</label>\n                    <input name={'jokesDate'} type=\"date\" onChange={(e) => setDate(new Date(e.target.value))}/>\n                </div>\n                {newJokesBtn}\n            </div>\n        </div>\n    );\n}\n\nexport default Jokes;","import './App.css';\nimport Jokes from \"./Jokes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Jokes />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}